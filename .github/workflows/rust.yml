name: CI

on:
  push:
    branches: ['main']
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, 1.56]
        features: [--all-features, ""]
        target: [""]
        exclude:
          - os: ubuntu-latest
            rust: beta
            features: ""
          - os: ubuntu-latest
            rust: 1.56
            features: --all-features
          - os: ubuntu-latest
            rust: 1.56
            features: ""
          - os: macos-latest
            rust: stable
            features: ""
          - os: macos-latest
            rust: beta
            features: --all-features
          - os: macos-latest
            rust: beta
            features: ""
          - os: macos-latest
            rust: 1.56
            features: --all-features
          - os: macos-latest
            rust: 1.56
            features: ""
          - os: windows-latest
            rust: stable
            features: ""
          - os: windows-latest
            rust: beta
            features: --all-features
          - os: windows-latest
            rust: beta
            features: ""
          - os: windows-latest
            rust: 1.56
            features: --all-features
          - os: windows-latest
            rust: 1.56
            features: ""
        include:
          - os: ubuntu-latest
            rust: 1.56
            features: --features improved_unicode
          - os: ubuntu-latest
            rust: stable
            features: --all-features
            target: --target armv5te-unknown-linux-gnueabi
            use-cross: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v6
        id: rust-target
        with:
          script: |
            const target = '${{ matrix.target }}'
            if (target) {
              const rustTarget = target.slice('--target'.length).trim()
              core.setOutput('rust-target', rustTarget)
            } else {
              core.setOutput('rust-target', '')
            }
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ steps.rust-target.outputs.rust-target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --workspace --all-targets ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: test
          args: --workspace ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: test
          args: --workspace ${{ matrix.features }} ${{ matrix.target }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1
        if: always()
        with:
          command: clippy
          args: --workspace --all-targets --all-features -- -D warnings
      - name: doc
        run: cargo doc --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -Dwarnings

  audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
